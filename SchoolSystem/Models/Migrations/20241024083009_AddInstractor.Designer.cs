// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolSystem.Models;

#nullable disable

namespace SchoolSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241024083009_AddInstractor")]
    partial class AddInstractor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SchoolSystem.Models.Entities.Instractor", b =>
                {
                    b.Property<int>("InstractorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstractorId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("InstractorId");

                    b.HasIndex("SubjectId")
                        .IsUnique();

                    b.ToTable("Instractor");
                });

            modelBuilder.Entity("SchoolSystem.Models.Entities.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int?>("InstractorId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("StudentId");

                    b.HasIndex("InstractorId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SchoolSystem.Models.Entities.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            Name = "Arabic"
                        },
                        new
                        {
                            SubjectId = 2,
                            Name = "Math"
                        },
                        new
                        {
                            SubjectId = 3,
                            Name = "English"
                        },
                        new
                        {
                            SubjectId = 4,
                            Name = "Physics"
                        },
                        new
                        {
                            SubjectId = 5,
                            Name = "Social Studies"
                        });
                });

            modelBuilder.Entity("SchoolSystem.Models.Entities.Instractor", b =>
                {
                    b.HasOne("SchoolSystem.Models.Entities.Subject", "Subject")
                        .WithOne("Instractor")
                        .HasForeignKey("SchoolSystem.Models.Entities.Instractor", "SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolSystem.Models.Entities.Student", b =>
                {
                    b.HasOne("SchoolSystem.Models.Entities.Instractor", "Instractor")
                        .WithMany("Students")
                        .HasForeignKey("InstractorId");

                    b.HasOne("SchoolSystem.Models.Entities.Subject", "Subject")
                        .WithMany("Students")
                        .HasForeignKey("SubjectId");

                    b.Navigation("Instractor");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolSystem.Models.Entities.Instractor", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchoolSystem.Models.Entities.Subject", b =>
                {
                    b.Navigation("Instractor")
                        .IsRequired();

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
